# http://flight-manual.atom.io/using-atom/sections/snippets/

'.source.coffee':
  'Snippeter':
    'prefix': 'snippeter'
    'body': """
    '.source.${1:scope}':
      '${2:Description}':
        'prefix': '${3:prefixo}'
        \'body\'\: \"""
    $4
        \"""
    """

  'Snippeter No Selector':
    'prefix': 'snippeterns'
    'body': """
    '${1:Description}':
      'prefix': '${2:prefixo}'
      \'body\'\: \"""
    $3
      \"""
    """

'.source.js':
  'Define Object (Ext)':
    'prefix': 'define'
    'body': """
      Ext._define('${1:namespace.object.path.Window}', {
        extend: '${2:ext.type.object}',
      });
      $3
    """

  'Create Object (Ext)':
    'prefix': 'create_object'
    'body': 'Ext._create(\'${1:namespace.object.path}\', {}).show();
    $2'

  'Create Ext-Window Restful':
    'prefix': 'window_restful'
    'body': """
      Ext._define('${1:namespace.object.path}.Window', {
        extend: 'core.RestfulWindow',
        rest: '${1:namespace.object.path}.Restful',

          formpanel$2
      });
      $3
    """

  'Create FormPanel (Ext)':
    'prefix': 'formpanel'
    'body': """
      ${1:getFormPanel}: function($2) {
        if(!this._${3:formPanel}) {
          this._${3:formPanel} = Ext._create('Ext.form.FormPanel', {
          border: ${4:false},
          frame: ${5:true},
          items: [
            {$6},
          ]
          });
        }

        return this._${3:formPanel};
      }
      $7
    """

  'Create Restful (Ext)':
    'prefix': 'restful'
    'body': """
      Ext._define('${1:namespace.object.path}', {
        extend: 'core.Restful',

        resource: '${2:RestfulControllerName}',

        getFields: function(cfg) {
          if(!this._${3:fields}) {
            this._${3:fields} = ${1:namespace.object.path}.superclass.getFields.call(this, cfg).concat([
              {type: "string", name: "${4:field1}"},
              {type: "date", name: "${5:field2}", dateFormat: "d/m/Y H:i"},
              {type: "int", name: "${6:field3}", useNull: false},
              {type: "bool", name: "${7:field4}", useNull: false},
            ]);
          }

          return this._${3:fields};
        }
      });
      $8
    """

  'Generate Report (New)':
    'prefix': 'report_new'
    'body': """
      engine.mq.Report.request({
          report: '${1:/to/mpe/path/to/Report}',
          el: this.getEl(),
          waitMessage: '${2:Gerando relatorio ...}',
          params: {
              outfile: '${3:prefix_name_file}_' + new Date().format("d/m/Y"),
              report_name: '${4:Nome do Relatorio}',
              param1: ${5:any_data_value},
              param2: ${6:any_data_value},
              param3: ${7:any_data_value},
          }
      });
      $8
    """

  'Create Manage (Ext)':
    'prefix': 'manager'
    'body': """
      Ext._define('${1:namespace.object.path}.Manage', {
        extend: 'toolkit.widget.TabPanel',

        get${2:NomeDoGrid}: function() {
          if(!this._${3:grid})
            this._${3:grid} = Ext._create('${1:namespace.object.path}.Grid', {
              region: '${4:center}',
              hideItemsToolbar: ['${5:remove}'],
              hideActions: ['${6:remove}'],
              allowRemove: ${7:false}
            });

          return this._${3:grid};
        },

        constructor: function(cfg) {
          cfg = cfg ? cfg : {};

          Ext.applyIf(
            cfg,
            {
               title: '${8:Gestor de Alguma coisa}'
            }
          );

          Ext.apply(
            cfg,
            {
              layout: 'border',
              items: this.get${2:NomeDoGrid}()
            }
          );

          ${1:namespace.object.path}.Manage.superclass.constructor.call(this, cfg);
        }
      });
      $9
    """

  'Confirm Button (Ext)':
    'prefix': 'confirm_button'
    'body': """
    ${1:cache}: function() {
      Ext.Msg.show({
        title: '${2:Texto da barra de título}',
        msg: '${3:Mensagem do corpo da janela}', // CANCEL, ERROR, INFO, OK, OKCANCEL, QUESTION, WARNING, YESNO, YESNOCANCEL
        icon: ${4:Ext.Msg.QUESTION},
        buttons: ${5:Ext.Msg.YESNOCANCEL},
        scope: this,
        fn: function(btn) {
          // switch(btn) {
          //   case 'yes':
          //     ${6:alert('SIIIIIIIM');}
          //     break;
          //   case 'no':
          //     ${7:alert('NÃÃÃÃÃÃÃO');}
          //     break;
          //   case 'cancel':
          //     ${8:return};
          // }
          if(btn == 'yes')
              ${6:alert('SIIIIIIIM');}
          else if(btn == 'no')
              ${7:alert('NÃÃÃÃÃÃÃO');}
          else if(btn == 'cancel')
              ${8:return};
        }
      });
    },
    $9
    """

  'Create Item (Ext)':
    'prefix': 'create_item'
    'body': """
    createItem: function(classDef) {
      Ext._create(classDef, {
        action: 'create',
        params: this.getParams(),
        values: {},
        callback: {
          success: {
            scope: this,
            fn: function() {
              this.getStore().reload();
            }
          }
        }
      }).show();
    },
    $1
    """

  'Fn (Ext)':
    'prefix': 'fn'
    'body': """
    get${1:NomeDaCache}: function(${2:args}) {
      if (!this._${3:nomeDaCache})
        this._${3:nomeDaCache} = Ext._create('${4:CustomField}', {
          name: '${5:Nome do campo}',
          fieldLabel: '${6:Nome do rótulo}',
          width: ${7:200},
          $8
        });

      return this._${3:nomeDaCache};
    }
    $9
    """

  'Action Button (Ext)':
    'prefix': 'action_button'
    'body': """
    get${1:NomeAcao}Button: function(cfg) {
      if(!this._${2:nome_da_acao}Button)
        this._${2:nome_da_acao}Button = Ext._create('Ext.Button', {
          text: '${3:Texto}',
          scope: this,
          handler: this.${4:funcao_do_botao},
        });

      return this._${2:nome_da_acao}Button;
    },
    $5
    """

  'Get Buttons (Ext)':
    'prefix': 'get_buttons'
    'body': """
    getButtons: function(cfg) {
      if(!this._buttons)
        this._buttons = [
          this.get${1:Sign}Button(cfg),
          ${2:'->'},
        ].concat(${3:namespace.do.objeto}.Window.superclass.getButtons.call(this, cfg));

      return this._buttons;
    },
    $4
    """

  'Filter-Menu (Ext)':
    'prefix': 'filter_menu'
    'body': """
    ${1:person}Filter: function() {
      if (!this._${1:person})
        this._${1:person} = Ext._create('Ext.menu.CheckItem', {
          text: '${2:Pessoa}',
          checked: ${3:true},
          scope: this,
          handler: function() {
            this.toggle${4:KindPerson}('${5:pessoa}');
          }
        });

      return this._${1:person};
    },

    getFilterMenu: function() {
      return [
        {
          text: '${6:Tipo}',
          menu: [
            this.${1:person}Filter(),
            '-',
            {
              text: 'Desfazer todos os filtros',
              scope: this,
              hideOnClick: ${7:false},
              handler: function() {
                this.setFilter([]);
                this.${1:person}Filter().setChecked(${3:true});
              }
            }
          ]
        },
      ];
    },

    toggle${4:KindPerson}: function(tipo) {
      if(!this._filter${4:KindPerson})
        this._filter${4:KindPerson} = ['${5:pessoa}'];

      if(this._filter${4:KindPerson}.indexOf(tipo) >= 0)
        this._filter${4:KindPerson}.remove(tipo);
      else
        this._filter${4:KindPerson}.push(tipo);

      this.setFilterProperty('${8:kind__in}', this._filter${4:KindPerson}, 1000);
    },
    $9
    """

  'Create Grid (Ext)':
    'prefix': 'create_grid'
    'body': """
    get${1:NomeDo}Grid: function(${2:cfg}) {
      if (!this._${3:grid})
        this._${3:grid} = Ext._create('${4:namespace.to.some}.Grid', {
          region: 'center',
          title: 'Título',
          // margins: '0 0 0 0',
          // flex: 1,
          // layout: 'fit',
          // allowRemove: true,
          // allowCreate: true,
          // allowUpdate: true,
          // columnAction: true,
          // gridAutoLoad: true,
          // hideItemsToolbar: ['add', 'edit', 'remove', 'search', 'download'],
          // hideActions: ['add', 'edit', 'remove'],
        });

      return this._${3:grid};
    }
    $5
    """

  'Grid Restful':
    'prefix': 'grid_restful'
    'body': """
    Ext._define('${1:namespace.path.of}.Grid', {
        extend: 'core.RestfulGrid',

        restWindow: '${1:namespace.path.of}.Window',

        configOrderToolBar: [${2:'add', 'edit', 'remove', '-', '->', '-'}],

        getColumnModel: function() {
            if(!this._columnModel)
                this._columnModel = Ext._create(
                    'Ext.grid.ColumnModel',
                    [
                        Ext._create('Ext.grid.RowNumberer'),
                        {header: '${3:Coluna 1}', dataIndex: '${4:coluna_1}', id: 'autoExpandColumn'},
                        {header: '${5:Coluna 2}', dataIndex: '${6:coluna_2_unicode}', width: ${7:130}, hidden: ${8:true}, sortable: ${9:true}},
                        {header: '${10:Coluna 3}', dataIndex: '${11:coluna_3}', renderer: Ext.util.Format.dateRenderer('d/m/Y H:i'), width: ${12:120}, hidden: ${13:true}, sortable: ${14:true}}
                    ]
                );

            return this._columnModel;
        },

        constructor: function(cfg) {
            cfg = core.nullValue(cfg, {});

            Ext.applyIf(
                cfg,
                {
                    columnAction: false
                }
            );

            ${1:namespace.path.of}.Grid.superclass.constructor.call(this, cfg);
        }
    });

    core.RestfulGrid.register(
        '${1:namespace.path.of}.Restful',
        '${1:namespace.path.of}.Grid'
    );$15
    """

  'Action Menu (Ext)':
    'prefix': 'action_menu'
    'body': """
    get${1:Nome}Action: function(cfg) {
      if(!this._${2:nome}Action)
        this._${2:nome}Action = Ext._create('Ext.Button', {
          text: '${3:Novo}',
          iconCls: '${4:icon-app icon-app-nome}',
          menu: ${5:namespace.do.grid}.getNewMenu(this)
        });

      return this._${2:nome}Action;
    },
    $6
    """

  'Selection Model (Ext)':
    'prefix': 'selection_model'
    'body': """
    this._${1:nameOfObect}Grid.getSelectionModel().on({
      scope: this,
      selectionchange: function(selm) {
        var selection = selm.getSelections();

        if(selection.length > 0)
          this.${1:nameOfObject}(selection[0]);
        else
          this.${1:nameOfObject}(null);
      }
    });
    $2
    """

  'Tool Bar (Ext)':
    'prefix': 'tool_bar'
    'body': """
    ${1:applySearch}: function() {
      var textSearch = this.getToolbar().getComponent('${2:searchBox}');
      this.getStore().baseParams.search = textSearch.getValue();
      this.getStore().load({});
    },

    getToolbar: function() {
      if(!this._toolBar)
        this._toolBar = new Ext.Toolbar({
          items: [
            {
              xtype: 'textfield',
              id: '${2:searchBox}',
              emptyText: '${3:Texto a ser localizado}',
              width: ${4:375},
              enableKeyEvents: ${5:true},
              listeners: {
                scope: this,
                specialkey: function(field, e) {
                  if(e.getKey() == e.ENTER || e.getKey() == e.TAB)
                    this.${1:applySearch}();
                }
              }
            },
            {
              text: '${6:Buscar}',
              scope: this,
              handler: this.${1:applySearch},
              iconCls: '${7:icon-app icon-app-nome}'
            }
          ]
        });

      return this._toolBar;
    }
    $8
    """

  'M2M Field (Ext)':
    'prefix': 'm2m_field'
    'body': """
    constructor: function(cfg) {
      cfg = cfg || {};

      Ext.applyIf(cfg, {
        disableSaveAndNew: true,
        saveAndContinue: {
          scope: this,
          fn: function(instance) {
            this.get${1:NomeDoCampo}().objectId(instance.pk);
            this.oId = instance.pk;
            this.action = 'update';
          }
        }
      });

      ${2:namespace.desta.janela}.Window.superclass.constructor.call(this, cfg);
    },

    get${1:NomeDoCampo}: function(${3:cfg}) {
      if(!this._${4:nomeDoCampo})
        this._${4:nomeDoCampo} = Ext._create('core.fields.RelatedRestfulField', {
          iconCls: '${5:icon-app icon-app-nome}',
          fieldLabel: '${6:Texto Identificador}',
          title: '${6:Texto Identificador}',
          hideLabel: ${7:true},
          name: '${8:nome_no_modelo}',
          displayField: 'unicode',
          allowBlank: false,
          relatedname: '${9:nome_do_relacionamento}',
          rest: this.rest,
          sourceRest: '${10:namespace.do.campo.relacionado}.Restful',
          oId: this.oId || ${3:cfg}.oId,
          width: ${11:350},
          height: ${12:170},
          border: false
        });

      return this._${4:nomeDoCampo};
    }
    $13
    """

  'Observer (Ext)':
    'prefix': 'observer'
    'body': """
    constructor: function(cfg) {
      cfg = cfg || {};

      Ext.applyIf(cfg, {
        disableSaveAndNew: true,
        saveAndContinue: {
          scope: this,
          fn: function(instance) {
            this.${1:nomeDoModelo}(instance.pk);
            this.oId = instance.pk;
            this.action = 'update';
          }
        }
      });

      ${2:namespace.desta.janela}.Window.superclass.constructor.call(this, cfg);

      this.${1:nomeDoModelo}(cfg.oId === undefined ? null : cfg.oId);
    },

    ${1:nomeDoModelo}: function(value, observe) {
      observe = (observe === undefined ? true : observe);

      if(value !== undefined) {
        this._${1:nomeDoModelo}Grid = value;

        if(observe)
          this.observe${3:NomeDoModelo}();
      }

      return this._${1:nomeDoModelo}Grid;
    },

    observe${3:NomeDoModelo}: function() {
      var value = this.${1:nomeDoModelo}();

      if(value) {
        this.get${4:M2M}Field().objectId(value); // componente m2m

        // Habilitar e filtrar Grid
        this.get${5:NomeDo}Grid().enable();
        this.get${5:NomeDo}Grid().setParam('${6:campo_parametro}', value);
        this.get${5:NomeDo}Grid().setFilterProperty('${6:campo_parametro}', value, 0);
      } else  {
        // Desabilitar e limpar Grid
        this.get${5:NomeDo}Grid().disable();
        this.get${5:NomeDo}Grid().setParam('${6:campo_parametro}', 0);
        this.get${5:NomeDo}Grid().setFilterProperty('${6:campo_parametro}', value, 0, false);
        this.get${5:NomeDo}Grid().getStore().removeAll();
      }
    },
    $7
    """

  'Set Filter Property (Ext)':
    'prefix': 'set_filter_property'
    'body': """
    this.get${1:NomeDo}Grid().setFilterProperty('${2:campo_parametro}', ${3:value_of_pk}, ${4:stage(numero)});
    $5
    """

  'Set Param (Ext)':
    'prefix': 'set_param'
    'body': """
    this.get${1:NomeDo}Grid().setParam('${2:retirement_prevision}', ${3:value_of_pk});
    $4
    """

  'Singleton (Ext)':
    'prefix': 'singleton'
    'body': """
    singleton: {
      classDB: [],

      register: function(name, label, iconCls, Class) {
        ${1:namespace.deste.Grid}.classDB.push({
          name: name,
          label: label,
          iconCls: iconCls,
          Class: Class
        });
      },

      getClassByName: function(name) {
        var Class = false;

        ${1:namespace.deste.Grid}.classDB.forEach(
          function(item) {
            if(item.name == name) {
              Class = item.Class;
              return false;
            }
          }
        );

        return Class;
      },

      getNewMenu: function(scope) {
        if(${1:namespace.deste.Grid}.classDB.length > 0) {
          return ${1:namespace.deste.Grid}.classDB.map(
            function(item) {
              return {
                text: item.label,
                scope: scope,
                iconCls: item.iconCls,
                handler: function() {
                  this.createItem(item.Class);
                }
              };
            }
          );
        }
        else
          return [
            {
              text: 'Nenhum tipo foi especificado',
              enable: false
            }
          ];
      }
    },
    $2
    """

  'Custom Field (Ext)':
    'prefix': 'custom_field'
    'body': """
    get${1:NomeDoCampo}Field: function(${2:cfg}) {
      if (!this._${3:nomeDoCampo})
        this._${3:nomeDoCampo} = Ext._create('Ext.custom.Field', {
          $4
        });

      return this._${3:nomeDoCampo};
    },
    $5
    """

  'Text Field (Ext)':
    'prefix': 'text_field'
    'body': """
    get${1:NomeDoCampo}Field: function(${2:cfg}) {
      if (!this._${3:nomeDoCampo})
        this._${3:nomeDoCampo} = Ext._create('Ext.form.TextField', {
          maxLength: ${4:80},
          allowBlank: ${5:true},
          fieldLabel: '${6:Cônjuge}',
          name: '${7:nome_conjuge}',
          disabled: ${8:true},
          width: ${9:200}
        });

      return this._${3:nomeDoCampo};
    }
    $10
    """

  'Update Item (Ext)':
    'prefix': 'update_item'
    'body': """
    updateItem: function(record) {
      if(record instanceof Ext.Button)
        record = undefined;

      var selected = core.nullValue(record, this.getSelectionModel().getSelected());

      if(selected) {
        var Class = ${1:namespace.deste.Grid}.getClassByName(selected.get('${2:kind}'));
        Ext._create(Class, {
          action: 'update',
          oId: selected.get('pk'),
          values: 'remote',
          params: this.getParams(),
          callback: {
            success: {
              scope: this,
              fn: function() {
                this.getStore().reload();
              }
            }
          }
        }).show();
      }
      else
        Ext.Msg.show({
          title: 'Editando',
          icon: Ext.Msg.ERROR,
          buttons: Ext.Msg.OK,
          msg: 'Primeiro selecione um item para editar.'
        });
    },
    $3
    """

  'Data HttpProxy (Ext)':
    'prefix': 'data_http_proxy'
    'body': """
    proxy: Ext._create('Ext.data.HttpProxy', {
      url: core.callAction('${1:NomeDoController}', '${2:nome_do_metodo}')
    })$3
    """

  'Data JsonReader (Ext)':
    'prefix': 'data_json_reader'
    'body': """
    reader: Ext._create('Ext.data.JsonReader', {
      totalProperty: 'count',
      root: 'collection',
      fields: [
        {name: 'pk', type: 'int'},
        {name: 'description', type: 'string'},
      ]
    })$3
    """

  'Data Store (Ext)':
    'prefix': 'data_store'
    'body': """
    store: Ext._create('Ext.data.Store', {
      proxy: Ext._create('Ext.data.HttpProxy', {
        url: core.callAction('${1:NomeDoController}', '${2:nome_do_metodo}')
      }),
      reader: Ext._create('Ext.data.JsonReader', {
        totalProperty: '${3:count}',
        root: '${4:collection}',
        fields: [
          {name: 'pk', type: 'int'},
          {name: 'description', type: 'string'},
        ]
      })
    })$5
    """

  'Ajax Request (Ext)':
    'prefix': 'ajax_request'
    'body': """
    Ext.Ajax.request({
      scope: this,
      url: core.callAction('${1:Controller}', '${2:file.json}'),
      callback: function() {${3:console.log();}},
      success: function(${4:response}, ${5:opts}) {
        var ${6:obj} = Ext.decode(${4:response}.responseText);
        console.dir(${6:obj});
      },
      failure: function(${4:response}, ${5:opts}) {
        console.log('Falha no servidor código status ' + ${4:response}.status);
      },
      params: {
        ${7:param_1}: '${8:value_1}',
        ${9:param_2}: '${10:value_2}'
      },
      // method: "$11"
    });$12
    """

  'Error Msg Show (Ext)':
    'prefix': 'error_msg_show'
    'body': """
    Ext.Msg.show({
        title: ${1:this.title},
        icon: ${2:Ext.Msg.ERROR},
        buttons: ${3:Ext.Msg.OK},
        msg: '${4:obj.message}'
    });$5
    """

  'Question Msg Show (Ext)':
    'prefix': 'question_msg_show'
    'body': """
    Ext.Msg.show({
        title: ${1:this.title},
        icon: ${2:Ext.Msg.QUESTION},
        buttons: ${3:Ext.Msg.YESNO},
        msg: '${4:"Nao sei o que lá não sei o que lá não sei o que lá?"}',
        scope: ${5:this},
        fn: function(btn) {
          if (btn == "no") return;
        }
    });$6
    """

  'Form TextField (xtype)':
    'prefix': 'form_text_field'
    'body': """
    {
      xtype: 'textfield',
      fieldLabel: '${1:Nome}',
      name: '${2:nome}',
      allowBlank: ${3:false},
      maxLength: ${4:128},
      width: ${5:200}
    }$6
    """

  'Form NumberField (xtype)':
    'prefix': 'form_number_field'
    'body': """
    {
      xtype: 'numberfield',
      fieldLabel: '${1:Nome}',
      name: '${2:nome}',
      allowBlank: ${3:false},
      allowDecimals: ${4:false},
      maxLength: ${5:128},
      width: ${6:200}
    }$7
    """

  'Form ChoiceField (xtype)':
    'prefix': 'form_choice_field'
    'body': """
    {
        xtype: 'choicefield',
        fieldLabel: '${1:Field Label}',
        hiddenName: '${2:field_name}',
        choiceId: '${3:app}.${4:CONSTANT_CHOICES}'
    }$5
    """

  'Form Panel (ExtJS)':
    'prefix': 'form_panel'
    'body': """
    get${1:Panel}: function(${2:cfg}) {
        if(!this._${3:panel})
            this._${3:panel} = Ext._create('Ext.Panel', {
                layout: 'form',
                title: '${5:Principal}',
                iconCls: '${6:icon-rh} ${7:icon-core-main-tab}',
                border: ${8:false},
                frame: ${9:true},
                scope: this,
                height: ${10:500},
                items: [
                  {
                    $11
                  }
                ]
            });
        return this._${3:panel};
    }$12
    """

  'Autocomplet Rest (ExtJS)':
    'prefix': 'autocomplet_rest'
    'body': """
    {
        xtype: 'rest-autocompletefield',
        fieldLabel: "Label",
        allowBlank: false,
        rest: "namespace.to.Restful",
        name: "field_name"
    },
    """

  'IconCls':
    'prefix': 'iconcls_grid'
    'body': """
    {header: '', dataIndex: 'icons', width: ${1:110}, renderer: core.rendererIconGrid, menuDisabled: true},
    """

'.source.python':
  'BigIntegerField (Models)':
    'prefix': 'big_integer_field'
    'body': """
    ${1:nome_do_campo} = models.BigIntegerField(verbose_name='${2:Descrição}', null=${3:True}$4)$5
    """

  'BooleanField (Models)':
    'prefix': 'boolean_field'
    'body': """
    ${1:nome_do_campo} = models.BooleanField(verbose_name='${2:Descrição}', default=${3:True}$4)$5
    """

  'CharField (Models)':
    'prefix': 'char_field'
    'body': """
    ${1:nome_do_campo} = models.CharField(max_length=${2:None}, verbose_name='${3:Descrição}', blank=${4:True}$5)$6
    """

  'CustomField (Models)':
    'prefix': 'custom_field'
    'body': """
    ${1:nome_do_campo} = models.${2:TipoDoCampo}(verbose_name = '${3:Descrição}'${4})$5
    """

  'DateField (Models)':
    'prefix': 'date_field'
    'body': """
    ${1:nome_do_campo} = models.DateField(${2:auto_now=False}, ${3:auto_now_add=False}, verbose_name='${4:Descrição}', null=${5:True}${6})$7
    """

  'DateTimeField (Models)':
    'prefix': 'date_time_field'
    'body': """
    ${1:nome_do_campo} = models.DateTimeField(${2:auto_now=False}, ${3:auto_now_add=False}, verbose_name='${4:Descrição}', null=${5:True}${6})$7
    """

  'EmailField (Models)':
    'prefix': 'email_field'
    'body': """
    ${1:nome_do_campo} = models.EmailField(max_length=${2:None}, verbose_name='${3:Descrição}', blank=${4:True}${5})$6
    """

  'FloatField (Models)':
    'prefix': 'float_field'
    'body': """
    ${1:nome_do_campo} = models.FloatField(verbose_name='${2:Descrição}', null=${3:True}${4})$5
    """

  'ForeignKey (Models)':
    'prefix': 'foreign_key'
    'body': """
    ${1:nome_do_campo} = models.ForeignKey(${2:NomeDoModelo}, verbose_name='${3:Descrição}', related_name='${4:relacionamento_campo_model}', null=${5:True}${6})$7
    """

  'IntegerField (Models)':
    'prefix': 'integer_field'
    'body': """
    ${1:nome_do_campo} = models.IntegerField(verbose_name='${2:Descrição}', null=${3:True}${4})$5
    """

  'M2MField (Models)':
    'prefix': 'm2m_field'
    'body': """
    ${1:nome_do_campo} = models.ManyToManyField(${2:NomeDoModelo}, verbose_name='${3:Descrição}', related_name='${4:relacionamento_campo_model}', through=${5:ModeloDeLigacao}${6})$7
    """

  'NullBolleanField (Models)':
    'prefix': 'null_boolean_field'
    'body': """
    ${1:nome_do_campo} = models.NullBooleanField(verbose_name='${2:Descrição}', default=${3:True}${4})$5
    """

  'O2OField (Models)':
    'prefix': 'o2o_field'
    'body': """
    ${1:nome_do_campo} = models.OneToOneField(${2:NomeDoModelo}, verbose_name='${3:Descrição}', related_name='${4:relacionamento_campo_model}', null=${5:True}${6})$7
    """

  'PositiveIntegerField (Models)':
    'prefix': 'positive_integer_field'
    'body': """
    ${1:nome_do_campo} = models.PositiveIntegerField(verbose_name='${2:Descrição}', null=${3:True}${4})$5
    """

  'PositiveSmallIntegerField (Models)':
    'prefix': 'positive_small_integer_field'
    'body': """
    ${1:nome_do_campo} = models.PositiveSmallIntegerField(verbose_name='${2:Descrição}', null=${3:True}${4})$5
    """

  'SlugField (Models)':
    'prefix': 'slug_field'
    'body': """
    ${1:nome_do_campo} = models.SlugField(max_length=${2:None}, verbose_name='${3:Descrição}', blank=${4:True}${5})$6
    """

  'SmallIntegerField (Models)':
    'prefix': 'small_integer_field'
    'body': """
    ${1:nome_do_campo} = models.SmallIntegerField(verbose_name='${2:Descrição}', null=${3:True}${4})$5
    """

  'TextField (Models)':
    'prefix': 'text_field'
    'body': """
    ${1:nome_do_campo} = models.TextField(verbose_name='${2:Descrição}', blank=${3:True}${4})$5
    """

  'TimeField (Models)':
    'prefix': 'time_field'
    'body': """
    ${1:nome_do_campo} = models.TimeField(${2:auto_now=False}, ${3:auto_now_add=False}, verbose_name='${4:Descrição}', null=${5:True}${6})$7
    """

  'URLField (Models)':
    'prefix': 'url_field'
    'body': """
    ${1:nome_do_campo} = models.URLField(max_length=${2:None}, verbose_name='${3:Descrição}', blank=${4:True}${5})$6
    """

  'Call Action (Controller)':
    'prefix': 'call_action_controller'
    'body': """
    def ${1:name_action}(self, *args):
        obj = {
            'success': False,
            'message': '${2:Nada foi feito ainda.}'
        }

        try:
            with transaction.atomic():
                for ${3:s} in ${4:NomeDoModelo}.objects.filter(${5:pk}__in=self.request.POST.getlist('${5:pk}')):
                    ${3:s}.${6:acao_a_executar}()
        except Exception as e:
            log.exception(e)
            obj.update(message=e.message)
        else:
            obj.update(success=True, message=u'Ação realizada com sucesso.')

        self.response['content-type'] = 'text/javascript'
        self.response.write(json.dumps(obj))$7
    """

  'Exception (Models)':
    'prefix': 'exception'
    'body': """
    except ${1:Exception} as ${2:e}:
        log.debug(${2:e})
    $3
    """

  'Get Query (Controller)':
    'prefix': 'get_query'
    'body': """
    from contrib.middleware import get_current_user

    def get_query(self):
        query = super(${1:Prefixo}${2:Modelo}, self).get_query()
        user = get_current_user()

        query = query.filter(${3:campo_parametro}__in=user.servidor.first().work_locations)

        return query
    ${4}
    """

  'Model To Dict (Controller)':
    'prefix': 'model_to_dict'
    'body': """
    def model_to_dict(self, instance):
        _dict_ = super(${1:PrefixoModelo}, self).model_to_dict(instance)

        _dict_.update({
            '${2:icons}': self.get_icons(instance),
            '${3:rest_name_field}': instance.${4:item_da_instancia}
        })

        return _dict_$5
    """

  'JSON Write (Controller)':
    'prefix': 'json_write'
    'body': """
    def json(self, args=[]):
        self.response['content-type'] = 'text/javascript'
        self.response.write('Ext._create("${1:namespace.do.manage}")')
    $2
    """

  'Register JS (__init__)':
    'prefix': 'register_js'
    'body': """
    # -*- coding: utf-8 -*-
    from default.views import Application

    Application.register_javascript('/%(context)s/static/${1:app}/${2:módulo}/${3:Prefixo}Restful.js')
    Application.register_javascript('/%(context)s/static/${1:app}/${2:módulo}/${3:Prefixo}Window.js')
    Application.register_javascript('/%(context)s/static/${1:app}/${2:módulo}/${3:Prefixo}Grid.js')
    Application.register_javascript('/%(context)s/static/${1:app}/${2:módulo}/${3:Prefixo}Manage.js')
    $4
    """

  'Empty Migration':
    'prefix': 'empty_migration'
    'body': """
    # -*- coding: utf-8 -*-
    from __future__ import unicode_literals
    from django.db import models, migrations


    def ${3:metodo_da_tarefa}(apps, schema_editor):
        ${4:pass}


    class Migration(migrations.Migration):

        dependencies = [
            ('${1:app}', '${2:xxyz_nome_da_migracao}'),
        ]

        operations = [
            migrations.RunPython(${3:metodo_da_tarefa})
        ]

    $5
    """

  'Create Model (Model)':
    'prefix': 'create_model'
    'body': """
    class ${1:Classe}(${2:models.Model}):
        \"""${3:Docstring da classe}.

        \"""
        ${4:pass}

        class Meta:
            verbose_name = u'${5:Nome no singular}'

        def __unicode__(self):  # __str__(self)
            ${6:pass}

        def save(self, *args, **kwargs):
            super(${1:Classe}, self).save(*args, **kwargs)
    $7
    """

  'Register CSS (__init__)':
    'prefix': 'register_css'
    'body': """
    # -*- coding: utf-8 -*-
    from default.views import Application

    Application.register_stylesheet('/%(context)s/static/${1:app}/images/${2:modulo}/${3:arquivo}.css')
    $4
    """

  'Raise (Exception)':
    'prefix': 'raise_exception'
    'body': """
    raise_msg = u'${1:Mensagem a ser exibida para a exceção}'
    raise ${2:Exception}(raise_msg)
    $3
    """

  'Signal (Signals)':
    'prefix': 'create_signal'
    'body': """
    # -*- coding: utf-8 -*-
    from contrib.utils import getLogger
    from django.db.models.signals import post_delete, post_save
    from django.dispatch import receiver
    from ${1:app}.${2:module}.models import ${3:Modelo}

    log = getLogger('${4:Identificador do sinal}')


    @receiver(post_delete, sender=${3:Modelo})
    @receiver(post_save, sender=${3:Modelo})
    def ${5:nome_da_acao_a_executar}(sender, instance, **kwargs):
        # log.info(u'${Texto qualquer} %s - %s' % (instance, instance.${6:item_da_instancia}))
        instance.${6:item_da_instancia}.save()

    $7
    """

  'RestfulDry (Controller)':
    'prefix': 'restfuldry'
    'body': """
    # -*- coding: utf-8 -*-
    from contrib.newrest import RestfulDRY
    from ${1:pkg.module}.models import ${2:Modelo}
    from contrib.middleware import get_current_user


    class ${3:Prefixo}${2:Modelo}(RestfulDRY):

        _model = ${2:Modelo}

        # full_text_index = (
        #     '${4:lookup_do_queryset}__icontains',
        # )

        # exclude_fields = ['${5:campo_herdado_ptr}']

        # force_persist_boolean_fields = ['${6:campo_booleano}']

        # force_upper = ${7:True}

        # force_persist_clear_m2m = [$8]

        def json(self, args=[]):
            self.response['content-type'] = 'text/javascript'
            self.response.write('Ext._create("${9:namespace.do.manage}")')

        def get_icons(self, instance):
            icon_${10:nome}_map = {
                '${11:opcao_icone_1}': {'iconCls': '${12:icon-xx icon-wxyz-namespace}', 'title': '${13:Descrição}'},
            }

            ${10:nome} = icon_${10:nome}_map.get(instance.${14:item_da_instancia})

            return ${10:nome}

        def model_to_dict(self, instance):
            _dict_ = super(${3:Prefixo}${2:Modelo}, self).model_to_dict(instance)

            _dict_.update({
                'icons': self.get_icons(instance),
                'rest_name_field': instance.item_da_instancia
            })

            return _dict_

        def get_query(self):
            query = super(${3:Prefixo}${2:Modelo}, self).get_query()
            user = get_current_user()

            query = query.filter(${15:campo_parametro}__in=user.servidor.first().work_locations)

            return query
    $16
    """

  'Delete (Models)':
    'prefix': 'delete'
    'body': """
    def delete(self, *args, **kwargs):
        super(${1:NomeDaClasse}, self).delete(*args, **kwargs)
    $2
    """

  'Get Icons (Models)':
    'prefix': 'get_icons'
    'body': """
    @property
    def get_icons(self):

        icon_${1:nome}_map = {
            '${2:opcao_icone_1}': {'iconCls': '${3:icon-xx icon-wxyz-namespace}', 'title': '${4:Descrição}'},
            '${5:opcao_icone_2}': {'iconCls': '${6:icon-xx icon-wxyz-namespace}', 'title': '${7:Descrição}'},
            '${8:opcao_icone_3}': {'iconCls': '${9:icon-xx icon-wxyz-namespace}', 'title': '${10:Descrição}'},
        }

        ${1:nome} = icon_${1:nome}_map.get(self.${11:campo_da_instancia})

        return ${1:nome}
    $12
    """

  'Make Command (Manage)':
    'prefix': 'make_command'
    'body': """
    # -*- coding: utf-8 -*-
    from django.core.management.base import BaseCommand
    from optparse import make_option
    from django.utils import translation

    log = getLogger(__name__)


    class Command(BaseCommand):
        help = u'''
        ${1:Texto que descreve o comando}
        '''
        verbose = '${2:False}'

        option_list = BaseCommand.option_list + (
            make_option(
                '-${3:x}',
                '--${4:xporextenso}',
                action='store_true',
                dest='${5:parametro_x}',
                default=${6:None},
                help=u'${7:Texto de auxílio}'
            ),
            make_option(
                '-${8:y}',
                '--${9:yporextenso}',
                action='store_true',
                dest='${10:parametro_y}',
                default=${11:None},
                help=u'${12:Texto de auxílio}'
            ),
        )

        def __init__(self, *args, **kwargs):
            super(Command, self).__init__(*args, **kwargs)

        def handle(self, *args, **options):
            if (options['${5:parametro_x}'] is None and options['${10:parametro_y}'] is None):
                print('Nenhum parametro foi passado. Consulte as opcoes passando o parametro -h')
            else:
                if options['${5:parametro_x}']:
                    self.${13:tarefa_do_parametro_x}()
                if options['${10:parametro_y}']:
                    self.${15:tarefa_do_parametro_y}()

            translation.deactivate()

        def ${13:tarefa_do_parametro_x}(self):
            ${14:pass}

        def ${15:tarefa_do_parametro_y}(self):
            ${16:pass}

    $17
    """

  'CustomAppConfig (Apps.Py)':
    'prefix': 'custom_apps_py'
    'body': """
    # -*- coding:utf-8 -*-

    '''
    No escopo de módulo NÃO DEVE HAVER import do settings ou qualquer outro módulo ou aplicativo que tenha
    importação do settings do Django.

    Solução: Criar modulos separados e fazer import via importlib
    a partir do escopo do método ready do AppConfig
    '''

    import importlib
    from django.apps import AppConfig

    class SampleConfig(AppConfig):  # Substituir "Sample" pelo nome que preferir dar ao AppConfig
        name = ''  # Caminho completo para o app. Ex: rh.gfp.dirf

        controllers = [
            # Aqui devem ser listados os caminhos dos controllers do app. Ex: web.api.cms.metadata
        ]

        def ready(self):
            '''
            O carregamento de partes necessárias ao app.
            '''
            connect_plugins()
            connect_signals()
            register_statics()
            # carregar qualquer outra coisa necessária ao app

    def connect_plugins():
        '''Seus plugins devem ser carregados aqui.

           importlib.import_module('nome.canonico.do.modulo.do.plugin')
        '''
        pass

    def connect_signals():
        '''Seus sinais devem ser carregados aqui.

           importlib.import_module('nome.canonico.do.modulo.do.sinal')
        '''
        pass

    def register_statics():
        '''O registro dos arquivos estáticos do app deve ser feito aqui.

        Ex:

            Application = importlib.import_module('default.views').Application

            Application.register_javascript('/%(context)s/static/web/js/shortcuts.js')
            Application.register_stylesheet('/%(context)s/static/web/css/styles.css')
        '''

        Application = importlib.import_module('default.views').Application
        # Application.register_javascript('/%(context)s/caminho/para/o/arquivo.js')
        # Application.register_stylesheet('/%(context)s/caminho/para/o/arquivo.css')


    """

# http://flight-manual.atom.io/using-atom/sections/snippets/

'.source.coffee':
    'Snippeter':
        prefix: 'snippeter'
        body: """
        '.source.${1:scope}':
            '${2:Description}':
            prefix: '${3:prefixo}'
            \'body\'\: \"""
                $4
            \"""
        """

    'Snippeter No Selector':
        prefix: 'snippeterns'
        body: """
        '${1:Description}':
            prefix: '${2:prefixo}'
            \'body\'\: \"""
                $3
            \"""
        """

'.source.js':
    'Define Object (Ext)':
        prefix: 'extjs_define'
        body: """
        Ext._define('${1:namespace.object.path.Window}', {
            extend: '${2:ext.type.object}',
        });
        $0
        """

    'Create Object (Ext)':
        prefix: 'extjs_create_object'
        body: 'Ext._create(\'${1:namespace.object.path}\', {}).show();
        $0'

    'Create Ext-Window Restful':
        prefix: 'extjs_window_restful'
        body: """
        Ext._define('${1:namespace.object.path}.Window', {
            extend: 'core.RestfulWindow',
            rest: '${1:namespace.object.path}.Restful',

            formpanel$2
        });
        $0
        """

    'Create FormPanel (Ext)':
        prefix: 'extjs_formpanel'
        body: """
        ${1:getFormPanel}: function($2) {
        if(!this._${3:formPanel}) {
            this._${3:formPanel} = Ext._create('Ext.form.FormPanel', {
                border: ${4:false},
                frame: ${5:true},
                items: [
                {$6},
                ]
            });
        }

            return this._${3:formPanel};
        }
        $0
        """

    'Create Restful (Ext)':
        prefix: 'extjs_restful'
        body: """
        Ext._define('${1:namespace.object.path}', {
            extend: 'core.Restful',
            resource: '${2:RestfulControllerName}',

            getFields: function(cfg) {
                if(!this._${3:fields}) {
                    this._${3:fields} = ${1:namespace.object.path}.superclass.getFields.call(this, cfg).concat([
                        {type: "string", name: "${4:field1}"},
                        {type: "date", name: "${5:field2}", dateFormat: "d/m/Y H:i"},
                        {type: "int", name: "${6:field3}", useNull: false},
                        {type: "bool", name: "${7:field4}", useNull: false},
                    ]);
                }

                return this._${3:fields};
            }
        });
        $0
        """

    'Generate Report (New)':
        prefix: 'extjs_report_new'
        body: """
        engine.mq.Report.request({
            report: '${1:/to/mpe/path/to/Report}',
            el: this.getEl(),
            waitMessage: '${2:Gerando relatorio ...}',
            params: {
                outfile: '${3:prefix_name_file}_' + new Date().format("d/m/Y"),
                report_name: '${4:Nome do Relatorio}',
                param1: ${5:any_data_value},
                param2: ${6:any_data_value},
                param3: ${7:any_data_value},
            }
        });
        $0
        """

    'Create Manage (Ext)':
        prefix: 'extjs_manager'
        body: """
        Ext._define('${1:namespace.object.path}.Manage', {
            extend: 'toolkit.widget.TabPanel',

            get${2:NomeDoGrid}: function() {
                if(!this._${3:grid})
                    this._${3:grid} = Ext._create('${1:namespace.object.path}.Grid', {
                        region: '${4:center}',
                        hideItemsToolbar: ['${5:remove}'],
                        hideActions: ['${6:remove}'],
                        allowRemove: ${7:false}
                  });

                return this._${3:grid};
            },

            constructor: function(cfg) {
                cfg = cfg || {};

                Ext.applyIf(cfg, {
                   title: '${8:Gestor de Alguma coisa}'
                });

                Ext.apply(cfg, {
                    layout: 'border',
                    items: this.get${2:NomeDoGrid}()
                });

                ${1:namespace.object.path}.Manage.superclass.constructor.call(this, cfg);
            }
        });
        $0
        """

    'Confirm Button (Ext)':
        prefix: 'extjs_confirm_button'
        body: """
        ${1:cache}: function() {
            Ext.Msg.show({
                title: '${2:Texto da barra de título}',
                msg: '${3:Mensagem do corpo da janela}', // CANCEL, ERROR, INFO, OK, OKCANCEL, QUESTION, WARNING, YESNO, YESNOCANCEL
                icon: ${4:Ext.Msg.QUESTION},
                buttons: ${5:Ext.Msg.YESNOCANCEL},
                scope: this,
                fn: function(btn) {
                  // switch(btn) {
                  //   case 'yes':
                  //     ${6:alert('SIIIIIIIM');}
                  //     break;
                  //   case 'no':
                  //     ${7:alert('NÃÃÃÃÃÃÃO');}
                  //     break;
                  //   case 'cancel':
                  //     ${8:return};
                  // }
                  if(btn == 'yes')
                      ${6:alert('SIIIIIIIM');}
                  else if(btn == 'no')
                      ${7:alert('NÃÃÃÃÃÃÃO');}
                  else if(btn == 'cancel')
                      ${8:return};
                }
            });
        },
        $0
        """

    'Create Item (Ext)':
        prefix: 'extjs_create_item'
        body: """
        createItem: function(classDef) {
            Ext._create(classDef, {
                action: 'create',
                params: this.getParams(),
                values: {},
                callback: {
                    success: {
                        scope: this,
                        fn: function() {
                            this.getStore().reload();
                        }
                    }
                }
            }).show();
        },
        $1
        """

    'Fn (Ext)':
        prefix: 'extjs_fn'
        body: """
        get${1:NomeDaCache}: function(${2:args}) {
            if (!this._${3:nomeDaCache})
                this._${3:nomeDaCache} = Ext._create('${4:CustomField}', {
                    name: '${5:Nome do campo}',
                    fieldLabel: '${6:Nome do rótulo}',
                    width: ${7:200},
                    $8
              });

            return this._${3:nomeDaCache};
        }
        $0
        """

    'Action Button (Ext)':
        prefix: 'extjs_action_button'
        body: """
        get${1:NomeAcao}Button: function(cfg) {
            if(!this._${2:nome_da_acao}Button)
                this._${2:nome_da_acao}Button = Ext._create('Ext.Button', {
                    text: '${3:Texto}',
                    scope: this,
                    handler: this.${4:funcao_do_botao},
                });

            return this._${2:nome_da_acao}Button;
        },
        $0
        """

    'Get Buttons (Ext)':
        prefix: 'extjs_get_buttons'
        body: """
        getButtons: function(cfg) {
            if(!this._buttons)
                this._buttons = [
                    this.get${1:Sign}Button(cfg),
                    ${2:'->'},
                ].concat(${3:namespace.do.objeto}.Window.superclass.getButtons.call(this, cfg));

            return this._buttons;
        },
        $0
        """

    'Filter-Menu (Ext)':
        prefix: 'extjs_filter_menu'
        body: """
        ${1:custom}Filter: function() {
            if (!this._${1:custom})
                this._${1:custom} = Ext._create('Ext.menu.CheckItem', {
                    text: '${2:Texto}',
                    checked: ${3:true},
                    scope: this,
                    handler: function() {
                        this.toggle${4:CustomKind}('${5:pessoa}');
                    }
                });

            return this._${1:custom};
        },

        getFilterMenu: function() {
            return [
                {
                    text: '${6:Tipo}',
                    menu: [
                        this.${1:custom}Filter(),
                        '-',
                        {
                            text: 'Desfazer todos os filtros',
                            scope: this,
                            hideOnClick: ${7:false},
                            handler: function() {
                                this.setFilter([]);
                                this.${1:custom}Filter().setChecked(${3:true});
                            }
                        }
                    ]
                },
            ];
        }

        toggle${4:CustomKind}: function(tipo) {
            if(!this._filter${4:CustomKind})
                this._filter${4:CustomKind} = ['${5:pessoa}'];

            if(this._filter${4:CustomKind}.indexOf(tipo) >= 0)
                this._filter${4:CustomKind}.remove(tipo);
            else
                this._filter${4:CustomKind}.push(tipo);

            this.setFilterProperty('${8:kind__in}', this._filter${4:CustomKind}, 1000);
        },
        $0
        """

    'Clean Filter':
        prefix: 'extjs_clean_filter'
        body: """
        cleanFilter: function() {
            // Undo Filter, Exclude and finally reload (autoload true)
            // this.removeFilterProperty('property__lookup', 10, false);
            // this.removeFilterProperty('property__lookup', -20, true);
            // or...
            // this.setFilter([]);
        }
        """

    'Create Grid (Ext)':
        prefix: 'extjs_create_grid'
        body: """
        get${1:NomeDo}Grid: function(${2:cfg}) {
            if (!this._${3:grid})
                this._${3:grid} = Ext._create('${4:namespace.to.some}.Grid', {
                    region: 'center',
                    title: 'Título',
                    // margins: '0 0 0 0',
                    // flex: 1,
                    // layout: 'fit',
                    // allowRemove: true,
                    // allowCreate: true,
                    // allowUpdate: true,
                    // columnAction: true,
                    // gridAutoLoad: true,
                    // hideItemsToolbar: ['add', 'edit', 'remove', 'search', 'download'],
                    // hideActions: ['add', 'edit', 'remove'],
                });

            return this._${3:grid};
        }
        $0
        """

    'Grid Restful':
        prefix: 'extjs_grid_restful'
        body: """
        Ext._define('${1:namespace.path.of}.Grid', {
            extend: 'core.RestfulGrid',
            restWindow: '${1:namespace.path.of}.Window',
            configOrderToolBar: [${2:'add', 'edit', 'remove', '-', 'search', '->', '-'}],

            getColumnModel: function() {
                if(!this._columnModel)
                    this._columnModel = Ext._create(
                        'Ext.grid.ColumnModel',
                        [
                            Ext._create('Ext.grid.RowNumberer'),
                            {header: '${3:Coluna 1}', dataIndex: '${4:coluna_1}', id: 'autoExpandColumn'},
                            {header: '${5:Coluna 2}', dataIndex: '${6:coluna_2_unicode}', width: ${7:130}, hidden: ${8:true}, sortable: ${9:true}},
                            {header: '${10:Coluna 3}', dataIndex: '${11:coluna_3}', renderer: Ext.util.Format.dateRenderer('d/m/Y H:i'), width: ${12:120}, hidden: ${13:true}, sortable: ${14:true}}
                        ]
                    );

                return this._columnModel;
            },

            constructor: function(cfg) {
                cfg = cfg || {};

                Ext.applyIf(cfg, {
                    columnAction: false
                });

                ${1:namespace.path.of}.Grid.superclass.constructor.call(this, cfg);
            }
        });

        core.RestfulGrid.register(
            '${1:namespace.path.of}.Restful',
            '${1:namespace.path.of}.Grid'
        );$0
        """

    'Action Menu (Ext)':
        prefix: 'extjs_action_menu'
        body: """
        get${1:Nome}Action: function(cfg) {
            if(!this._${2:nome}Action)
                this._${2:nome}Action = Ext._create('Ext.Button', {
                    text: '${3:Novo}',
                    iconCls: '${4:icon-app icon-app-nome}',
                    menu: ${5:namespace.do.grid}.getNewMenu(this)
                });

            return this._${2:nome}Action;
        },
        $0
        """

    'Selection Model (Ext)':
        prefix: 'extjs_selection_model'
        body: """
        this._${1:nameOfObect}Grid.getSelectionModel().on({
            scope: this,
            selectionchange: function(selm) {
            var selection = selm.getSelections();

            if(selection.length > 0)
                this.${1:nameOfObject}(selection[0]);
            else
                this.${1:nameOfObject}(null);
            }
        });
        $0
        """

    'Tool Bar (Ext)':
        prefix: 'extjs_tool_bar'
        body: """
        ${1:applySearch}: function() {
            var textSearch = this.getToolbar().getComponent('${2:searchBox}');
            this.getStore().baseParams.search = textSearch.getValue();
            this.getStore().load({});
        },

        getToolbar: function() {
            if(!this._toolBar)
                this._toolBar = new Ext.Toolbar({
                    items: [
                        {
                            xtype: 'textfield',
                            id: '${2:searchBox}',
                            emptyText: '${3:Texto a ser localizado}',
                            width: ${4:375},
                            enableKeyEvents: ${5:true},
                            listeners: {
                                scope: this,
                                specialkey: function(field, e) {
                                    if(e.getKey() == e.ENTER || e.getKey() == e.TAB)
                                    this.${1:applySearch}();
                                }
                            }
                        },
                        {
                            text: '${6:Buscar}',
                            scope: this,
                            handler: this.${1:applySearch},
                            iconCls: '${7:icon-app icon-app-nome}'
                        }
                    ]
                });

            return this._toolBar;
        }
        $0
        """

    'M2M Field (Ext)':
        prefix: 'extjs_m2m_field'
        body: """
        constructor: function(cfg) {
            cfg = cfg || {};

            Ext.applyIf(cfg, {
            disableSaveAndNew: true,
            saveAndContinue: {
                scope: this,
                fn: function(instance) {
                    this.get${1:NomeDoCampo}().objectId(instance.pk);
                    this.oId = instance.pk;
                    this.action = 'update';
                }
            }
            });

            ${2:namespace.desta.janela}.Window.superclass.constructor.call(this, cfg);
        },

        get${1:NomeDoCampo}: function(${3:cfg}) {
            if(!this._${4:nomeDoCampo})
                this._${4:nomeDoCampo} = Ext._create('core.fields.RelatedRestfulField', {
                    iconCls: '${5:icon-app icon-app-nome}',
                    fieldLabel: '${6:Texto Identificador}',
                    title: '${6:Texto Identificador}',
                    hideLabel: ${7:true},
                    name: '${8:nome_no_modelo}',
                    displayField: 'unicode',
                    allowBlank: false,
                    relatedname: '${9:nome_do_relacionamento}',
                    rest: this.rest,
                    sourceRest: '${10:namespace.do.campo.relacionado}.Restful',
                    oId: this.oId || ${3:cfg}.oId,
                    width: ${11:350},
                    height: ${12:170},
                    border: false
                });

            return this._${4:nomeDoCampo};
        }
        $0
        """

    'Observer (Ext)':
        prefix: 'extjs_observer'
        body: """
        constructor: function(cfg) {
            cfg = cfg || {};

            Ext.applyIf(cfg, {
                disableSaveAndNew: true,
                saveAndContinue: {
                    scope: this,
                    fn: function(instance) {
                        this.${1:nomeDoModelo}(instance.pk);
                        this.oId = instance.pk;
                        this.action = 'update';
                    }
                }
            });

            ${2:namespace.desta.janela}.Window.superclass.constructor.call(this, cfg);

            this.${1:nomeDoModelo}(cfg.oId === undefined ? null : cfg.oId);
        },

        ${1:nomeDoModelo}: function(value, observe) {
            observe = (observe === undefined ? true : observe);

            if(value !== undefined) {
                this._${1:nomeDoModelo}Grid = value;

                if(observe)
                    this.observe${3:NomeDoModelo}();
            }

            return this._${1:nomeDoModelo}Grid;
        },

        observe${3:NomeDoModelo}: function() {
            var value = this.${1:nomeDoModelo}();

            if(value) {
                this.get${4:M2M}Field().objectId(value); // componente m2m

                // Habilitar e filtrar Grid
                this.get${5:NomeDo}Grid().enable();
                this.get${5:NomeDo}Grid().setParam('${6:campo_parametro}', value);
                this.get${5:NomeDo}Grid().setFilterProperty('${6:campo_parametro}', value, 0);
            } else  {
                // Desabilitar e limpar Grid
                this.get${5:NomeDo}Grid().disable();
                this.get${5:NomeDo}Grid().setParam('${6:campo_parametro}', 0);
                this.get${5:NomeDo}Grid().setFilterProperty('${6:campo_parametro}', value, 0, false);
                this.get${5:NomeDo}Grid().getStore().removeAll();
            }
        },
        $0
        """

    'Set Filter Property (Ext)':
        prefix: 'extjs_set_filter_property'
        body: """
        this.get${1:NomeDo}Grid().setFilterProperty('${2:campo_parametro}', ${3:value_of_pk}, ${4:stage(numero)});
        $0
        """

    'Set Param (Ext)':
        prefix: 'extjs_set_param'
        body: """
        this.get${1:NomeDo}Grid().setParam('${2:retirement_prevision}', ${3:value_of_pk});
        $0
        """

    'Singleton (Ext)':
        prefix: 'extjs_singleton'
        body: """
        singleton: {
            classDB: [],

            register: function(name, label, iconCls, Class) {
                ${1:namespace.deste.Grid}.classDB.push({
                    name: name,
                    label: label,
                    iconCls: iconCls,
                    Class: Class
                });
            },

            getClassByName: function(name) {
                var Class = false;

                ${1:namespace.deste.Grid}.classDB.forEach(
                    function(item) {
                        if(item.name == name) {
                            Class = item.Class;
                            return false;
                        }
                    }
                );

                return Class;
            },

            getNewMenu: function(scope) {
                if(${1:namespace.deste.Grid}.classDB.length > 0) {
                    return ${1:namespace.deste.Grid}.classDB.map(
                        function(item) {
                            return {
                                text: item.label,
                                scope: scope,
                                iconCls: item.iconCls,
                                handler: function() {
                                    this.createItem(item.Class);
                                }
                            };
                        }
                    );
                }
                else
                    return [
                        {
                            text: 'Nenhum tipo foi especificado',
                            enable: false
                        }
                    ];
                }
        },
        $0
        """

    'Custom Field (Ext)':
        prefix: 'extjs_custom_field'
        body: """
        get${1:NomeDoCampo}Field: function(${2:cfg}) {
            if (!this._${3:nomeDoCampo})
                this._${3:nomeDoCampo} = Ext._create('Ext.custom.Field', {
                    $4
                });

            return this._${3:nomeDoCampo};
        },
        $0
        """

    'Text Field (Ext)':
        prefix: 'extjs_text_field'
        body: """
        get${1:NomeDoCampo}Field: function(${2:cfg}) {
            if (!this._${3:nomeDoCampo})
                this._${3:nomeDoCampo} = Ext._create('Ext.form.TextField', {
                maxLength: ${4:80},
                allowBlank: ${5:true},
                fieldLabel: '${6:Cônjuge}',
                name: '${7:nome_conjuge}',
                disabled: ${8:true},
                width: ${9:200}
            });

            return this._${3:nomeDoCampo};
        }
        $0
        """

    'Update Item (Ext)':
        prefix: 'extjs_update_item'
        body: """
        updateItem: function(record) {
            if(record instanceof Ext.Button)
                record = undefined;

            var selected = core.nullValue(record, this.getSelectionModel().getSelected());

            if(selected) {
                var Class = ${1:namespace.deste.Grid}.getClassByName(selected.get('${2:kind}'));
                Ext._create(Class, {
                    action: 'update',
                    oId: selected.get('pk'),
                    values: 'remote',
                    params: this.getParams(),
                    callback: {
                        success: {
                            scope: this,
                            fn: function() {
                                this.getStore().reload();
                            }
                        }
                    }
                }).show();
            }
            else
                Ext.Msg.show({
                    title: 'Editando',
                    icon: Ext.Msg.ERROR,
                    buttons: Ext.Msg.OK,
                    msg: 'Primeiro selecione um item para editar.'
                });
        },
        $0
        """

    'Data HttpProxy (Ext)':
        prefix: 'extjs_data_http_proxy'
        body: """
        proxy: Ext._create('Ext.data.HttpProxy', {
            url: core.callAction('${1:NomeDoController}', '${2:nome_do_metodo}')
        })$0
        """

    'Data JsonReader (Ext)':
        prefix: 'extjs_data_json_reader'
        body: """
        reader: Ext._create('Ext.data.JsonReader', {
            totalProperty: 'count',
            root: 'collection',
            fields: [
                {name: 'pk', type: 'int'},
                {name: 'description', type: 'string'},
            ]
        })$0
        """

    'Data Store (Ext)':
        prefix: 'extjs_data_store'
        body: """
        store: Ext._create('Ext.data.Store', {
            proxy: Ext._create('Ext.data.HttpProxy', {
                url: core.callAction('${1:NomeDoController}', '${2:nome_do_metodo}')
            }),
            reader: Ext._create('Ext.data.JsonReader', {
                totalProperty: '${3:count}',
                root: '${4:collection}',
                fields: [
                    {name: 'pk', type: 'int'},
                    {name: 'description', type: 'string'},
                ]
            }),
            baseParams: {
                'param_1': 'value_1',
                'param_2': 'value_2'
            }
        })$0
        """

    'Ajax Request (Ext)':
        prefix: 'extjs_ajax_request'
        body: """
        Ext.Ajax.request({
            url: core.callAction('Controller', 'action_or_jsonfile'),
            scope: this,
            params: {
                param_1: 'value_1',
                param_2: 'value_2'
            },
            success: function(response, options) {
                var obj = Ext.decode(response.responseText);

                // this.getStore().reload();
                Ext.Msg.show({
                    title: this.title,
                    icon: obj.success ? Ext.Msg.INFO : Ext.Msg.ERROR,
                    buttons: Ext.Msg.OK,
                    msg: obj.message
                });
            },
            failure: function(response, options) {
                Ext.Msg.show({
                    title: this.title,
                    icon: Ext.Msg.ERROR,
                    buttons: Ext.Msg.OK,
                    msg: response.status
                });
            },
            callback: function(options, success, response) {
                console.log('Concluído com ' + (success ? 'sucesso' : 'falha'));
            },
        });
        """

    'Error Msg Show (Ext)':
        prefix: 'extjs_error_msg_show'
        body: """
        Ext.Msg.show({
            title: ${1:this.title},
            icon: ${2:Ext.Msg.ERROR},
            buttons: ${3:Ext.Msg.OK},
            msg: '${4:obj.message}'
        });$0
        """

    'Question Msg Show (Ext)':
        prefix: 'extjs_question_msg_show'
        body: """
        Ext.Msg.show({
            title: ${1:this.title},
            icon: ${2:Ext.Msg.QUESTION},
            buttons: ${3:Ext.Msg.YESNO},
            msg: '${4:Nao sei o que lá não sei o que lá não sei o que lá?}',
            scope: ${5:this},
            fn: function(btn) {
                if (btn == "no") return;
            }
        });$0
        """

    'Form TextField (xtype)':
        prefix: 'extjs_form_text_field'
        body: """
        {
            xtype: 'textfield',
            fieldLabel: '${1:Nome}',
            name: '${2:nome}',
            allowBlank: ${3:false},
            maxLength: ${4:128},
            width: ${5:200}
        }$0
        """

    'Form NumberField (xtype)':
        prefix: 'extjs_form_number_field'
        body: """
        {
            xtype: 'numberfield',
            fieldLabel: '${1:Nome}',
            name: '${2:nome}',
            allowBlank: ${3:false},
            allowDecimals: ${4:false},
            maxLength: ${5:128},
            width: ${6:200}
        }$0
        """

    'Form ChoiceField (xtype)':
        prefix: 'extjs_form_choice_field'
        body: """
        {
            xtype: 'choicefield',
            fieldLabel: '${1:Field Label}',
            hiddenName: '${2:field_name}',
            choiceId: '${3:app}.${4:CONSTANT_CHOICES}'
        }$0
        """

    'Form Panel (ExtJS)':
        prefix: 'extjs_form_panel'
        body: """
        get${1:Panel}: function(${2:cfg}) {
            if(!this._${3:panel})
                this._${3:panel} = Ext._create('Ext.Panel', {
                    layout: 'form',
                    title: '${5:Principal}',
                    iconCls: '${6:icon-rh} ${7:icon-core-main-tab}',
                    border: ${8:false},
                    frame: ${9:true},
                    scope: this,
                    height: ${10:500},
                    items: [
                      {
                          $11
                      }
                    ]
                });
            return this._${3:panel};
        }$0
        """

    'Autocomplet Rest (ExtJS)':
        prefix: 'extjs_autocomplet_rest'
        body: """
        get${1:NomeDo}Field: function() {
            if (!this._${2:nomeDo}Field) {
                this._${2:nomeDo}Field = Ext._create('core.fields.AutocompleteField', {
                    fieldLabel: '${3:Nome do campo}',
                    // emptyText: 'Placeholder text',
                    name: "${4:diligence}",
                    displayField: 'unicode',
                    valueField: 'pk',
                    rest: '${5:namespace.to.Restful}',
                    allowBlank: true,
                    // preFilter: [{property: 'ativo__in', value: [true, false], stage: 1001}],
                    // gridConfig: {
                    //     columnAction: false,
                    //     allowCreate: false,
                    //     allowUpdate: false,
                    //     allowRemove: false,
                    //     configOrderToolBar: ['search', '->'],
                    //     hideItemsToolbar: ['add', 'edit', 'remove', 'download', 'filter'],
                    //     hideColumns: ['column1', 'column2'],
                    // }
                });
            }

            return this._${2:nomeDo}Field;
        },$0
        """

    'IconCls (ExtJS)':
        prefix: 'extjs_iconcls_grid'
        body: """
        {header: '', dataIndex: 'icons', width: ${1:110}, renderer: core.rendererIconGrid, menuDisabled: true},
        """

    'Constructor (ExtJS)':
        prefix: 'extjs_constructor_extjs'
        body: """
        constructor: function(cfg) {
            cfg = cfg || {$1};

            Ext.apply(cfg, {$2});
            Ext.applyIf(cfg, {$3});

            ${4:namespace.of.object.until}.superclass.constructor.call(this, cfg);
        }$0
        """

    'Form BooleanField (xtype)':
        prefix: 'extjs_form_bool_field'
        body: """
        {
            xtype: 'checkbox',
            fieldLabel: '&nbsp;',
            labelSeparator: '&nbsp;',
            boxLabel: 'Bla ble bli blo blu?',
            allowBlank: true,
            name: 'field_name'
        },
        """

    'Restful - Call Action':
        prefix: 'extjs_restful_call_action'
        body: """
        ${1:doActionName}: function() {
            var mask = new Ext.LoadMask(this.getEl(), {msg: '${2:Processando}...'});
            mask.show();

            this.factoryRestful().${1:doActionName}(
                {
                    pkset: ${3:this.oId}, /* selections.map(function(row) { return row.get('pk');}) */
                    another_param: ${4:'another_param'},
                },
                {
                    scope: this,
                    fn: function(obj) {
                        Ext.Msg.show({
                            title: this.title,
                            icon: obj.success ? Ext.Msg.INFO : Ext.Msg.ERROR,
                            buttons: Ext.Msg.OK,
                            msg: obj.message
                        });
                    }
                },
                {
                    scope: this,
                    fn: function(message) {
                        Ext.Msg.show({
                            title: this.title,
                            icon: Ext.Msg.ERROR,
                            buttons: Ext.Msg.OK,
                            msg: message
                        });
                    }
                },
                {
                    fn: function() { mask.hide(); }
                }
            );
        }$0
        """

    'Restful - Do Ajax Request':
        prefix: 'extjs_restful_do_ajax_request'
        body: """
        ${1:doActionName}: function(params, cbSuccess, cbFailure, cbCallback) {
            this.doRequest(
                this.getRoute(
                    '${2:do_action_name}',
                    false,
                    '${3:PUT}',
                    {
                        params: {
                            ${4:pkset: params.pkset},
                            ${5:another_param: params.another_param},
                        },
                        scope: this,
                        success: function(xhr) {
                            var rst = Ext.decode(xhr.responseText);

                            if(rst.success)
                                core.invokeCallback((cbSuccess || {fn: Ext.emptyFn}), rst);
                            else
                                core.invokeCallback((cbFailure || {fn: Ext.emptyFn}), rst.message);
                        },
                        failure: function() {
                            core.invokeCallback((cbFailure || {fn: Ext.emptyFn}), 'Recurso indisponivel no momento.');
                        },
                        callback: function() {
                            core.invokeCallback((cbCallback || {fn: Ext.emptyFn}));
                        }
                    }
                )
            );
        }$0
        """

'.source.python':
  'Call Action (Controller)':
    prefix: 'py_call_action_controller'
    body: """
    def ${1:name_action}(self, *args):
        response = {
            'success': False,
            'message': '${2:Nada foi feito ainda.}'
        }

        try:
            with transaction.atomic():
                for ${3:s} in ${4:NomeDoModelo}.objects.filter(${5:pk}__in=self.request.POST.getlist('${5:pk}')):
                    ${3:s}.${6:acao_a_executar}()
        except Exception as e:
            log.exception(e)
            response.update(message=e.message)
        else:
            response.update(success=True, message=u'Ação realizada com sucesso.')

        self.response['content-type'] = 'text/javascript'
        self.response.write(json.dumps(response))$7
    """

  'Exception (Models)':
    prefix: 'py_exception'
    body: """
    except ${1:Exception} as ${2:e}:
        log.debug(${2:e})
    $3
    """

  'Get Query (Controller)':
    prefix: 'py_get_query'
    body: """
    from contrib.middleware import get_current_user

    def get_query(self):
        query = super(${1:Prefixo}${2:Modelo}, self).get_query()
        user = get_current_user()

        query = query.filter(${3:campo_parametro}__in=user.servidor.first().work_locations)

        return query
    ${4}
    """

  'Model To Dict (Controller)':
    prefix: 'py_model_to_dict'
    body: """
    def model_to_dict(self, instance):
        _dict_ = super(${1:PrefixoModelo}, self).model_to_dict(instance)

        _dict_.update({
            '${2:icons}': instance.icons(instance),
            '${3:rest_name_field}': instance.${4:item_da_instancia}
        })

        return _dict_$5
    """

  'JSON Write (Controller)':
    prefix: 'py_json_write'
    body: """
    def json(self, args=[]):
        self.response['content-type'] = 'text/javascript'
        self.response.write('Ext._create("${1:namespace.do.manage}")')
    $2
    """

  'Register JS (__init__)':
    prefix: 'py_register_js'
    body: """
    # -*- coding: utf-8 -*-
    from default.views import Application

    Application.register_javascript('/%(context)s/static/${1:app}/${2:módulo}/${3:Prefixo}Restful.js')
    Application.register_javascript('/%(context)s/static/${1:app}/${2:módulo}/${3:Prefixo}Window.js')
    Application.register_javascript('/%(context)s/static/${1:app}/${2:módulo}/${3:Prefixo}Grid.js')
    Application.register_javascript('/%(context)s/static/${1:app}/${2:módulo}/${3:Prefixo}Manage.js')
    $4
    """

  'Empty Migration':
    prefix: 'py_empty_migration'
    body: """
    # -*- coding: utf-8 -*-
    from __future__ import unicode_literals
    from django.db import models, migrations


    def ${3:metodo_da_tarefa}(apps, schema_editor):
        ${4:pass}


    class Migration(migrations.Migration):

        dependencies = [
            ('${1:app}', '${2:xxyz_nome_da_migracao}'),
        ]

        operations = [
            migrations.RunPython(${3:metodo_da_tarefa})
        ]

    $5
    """

  'Create Model (Model)':
    prefix: 'py_create_model'
    body: """
    class ${1:Classe}(${2:models.Model}):
        \"""${3:Docstring da classe}.

        \"""
        ${4:pass}

        class Meta:
            verbose_name = u'${5:Nome no singular}'

        def __str__(self):  # __unicode__(self)
            ${6:pass}

        def save(self, *args, **kwargs):
            super(${1:Classe}, self).save(*args, **kwargs)
    $0
    """

  'Register CSS (__init__)':
    prefix: 'py_register_css'
    body: """
    # -*- coding: utf-8 -*-
    from default.views import Application

    Application.register_stylesheet('/%(context)s/static/${1:app}/images/${2:modulo}/${3:arquivo}.css')
    $0
    """

  'Raise (Exception)':
    prefix: 'py_raise_exception'
    body: """
    raise_msg = u'${1:Mensagem a ser exibida para a exceção}'
    raise ${2:Exception}(raise_msg)
    $0
    """

  'Signal (Signals)':
    prefix: 'py_create_signal'
    body: """
    # -*- coding: utf-8 -*-
    from contrib.utils import getLogger
    from django.db.models.signals import post_delete, post_save
    from django.dispatch import receiver
    from ${1:app}.${2:module}.models import ${3:Modelo}

    log = getLogger('${4:Identificador do sinal}')


    @receiver(post_delete, sender=${3:Modelo})
    @receiver(post_save, sender=${3:Modelo})
    def ${5:nome_da_acao_a_executar}(sender, instance, **kwargs):
        # log.info(u'${Texto qualquer} %s - %s' % (instance, instance.${6:item_da_instancia}))
        instance.${6:item_da_instancia}.save()

    $0
    """

  'RestfulDry (Controller)':
    prefix: 'py_restfuldry'
    body: """
    # -*- coding: utf-8 -*-
    from contrib.newrest import RestfulDRY
    from ${1:pkg.module}.models import ${2:Modelo}
    from contrib.middleware import get_current_user


    class ${3:Prefixo}${2:Modelo}(RestfulDRY):

        _model = ${2:Modelo}

        # full_text_index = (
        #     '${4:lookup_do_queryset}__icontains',
        # )

        # exclude_fields = ['${5:campo_herdado_ptr}']

        # force_persist_boolean_fields = ['${6:campo_booleano}']

        # force_upper = ${7:True}

        # force_persist_clear_m2m = [$8]

        def json(self, args=[]):
            self.response['content-type'] = 'text/javascript'
            self.response.write('Ext._create("${9:namespace.do.manage}")')

        def get_icons(self, instance):
            icon_${10:nome}_map = {
                '${11:opcao_icone_1}': {'iconCls': '${12:icon-xx icon-wxyz-namespace}', 'title': '${13:Descrição}'},
            }

            ${10:nome} = icon_${10:nome}_map.get(instance.${14:item_da_instancia})

            return ${10:nome}

        def model_to_dict(self, instance):
            _dict_ = super(${3:Prefixo}${2:Modelo}, self).model_to_dict(instance)

            _dict_.update({
                'icons': self.get_icons(instance),
                'rest_name_field': instance.item_da_instancia
            })

            return _dict_

        def get_query(self):
            query = super(${3:Prefixo}${2:Modelo}, self).get_query()
            user = get_current_user()

            query = query.filter(${15:campo_parametro}__in=user.servidor.first().work_locations)

            return query
    $0
    """

  'Delete (Models)':
    prefix: 'py_delete'
    body: """
    def delete(self, *args, **kwargs):
        super(${1:NomeDaClasse}, self).delete(*args, **kwargs)
    $0
    """

  'Get Icons (Models)':
    prefix: 'py_get_icons'
    body: """
    @property
    def get_icons(self):

        icon_${1:nome}_map = {
            '${2:opcao_icone_1}': {'iconCls': '${3:icon-xx icon-wxyz-namespace}', 'title': '${4:Descrição}'},
            '${5:opcao_icone_2}': {'iconCls': '${6:icon-xx icon-wxyz-namespace}', 'title': '${7:Descrição}'},
            '${8:opcao_icone_3}': {'iconCls': '${9:icon-xx icon-wxyz-namespace}', 'title': '${10:Descrição}'},
        }

        ${1:nome} = icon_${1:nome}_map.get(self.${11:campo_da_instancia})

        return ${1:nome}
    $0
    """

  'Make Command (Manage)':
    prefix: 'py_make_command'
    body: """
    # -*- coding: utf-8 -*-
    from django.core.management.base import BaseCommand
    from optparse import make_option
    from django.utils import translation

    log = getLogger(__name__)


    class Command(BaseCommand):
        help = u'''
        ${1:Texto que descreve o comando}
        '''
        verbose = '${2:False}'

        option_list = BaseCommand.option_list + (
            make_option(
                '-${3:x}',
                '--${4:xporextenso}',
                action='store_true',
                dest='${5:parametro_x}',
                default=${6:None},
                help=u'${7:Texto de auxílio}'
            ),
            make_option(
                '-${8:y}',
                '--${9:yporextenso}',
                action='store_true',
                dest='${10:parametro_y}',
                default=${11:None},
                help=u'${12:Texto de auxílio}'
            ),
        )

        def __init__(self, *args, **kwargs):
            super(Command, self).__init__(*args, **kwargs)

        def handle(self, *args, **options):
            if (options['${5:parametro_x}'] is None and options['${10:parametro_y}'] is None):
                print('Nenhum parametro foi passado. Consulte as opcoes passando o parametro -h')
            else:
                if options['${5:parametro_x}']:
                    self.${13:tarefa_do_parametro_x}()
                if options['${10:parametro_y}']:
                    self.${15:tarefa_do_parametro_y}()

            translation.deactivate()

        def ${13:tarefa_do_parametro_x}(self):
            ${14:pass}

        def ${15:tarefa_do_parametro_y}(self):
            ${16:pass}

    $0
    """

  'CustomAppConfig (Apps.Py)':
    prefix: 'py_custom_apps_py'
    body: """
    # -*- coding:utf-8 -*-

    '''
    No escopo de módulo NÃO DEVE HAVER import do settings ou qualquer outro módulo ou aplicativo que tenha
    importação do settings do Django.

    Solução: Criar modulos separados e fazer import via importlib
    a partir do escopo do método ready do AppConfig
    '''

    import importlib
    from django.apps import AppConfig

    class SampleConfig(AppConfig):  # Substituir "Sample" pelo nome que preferir dar ao AppConfig
        name = ''  # Caminho completo para o app. Ex: rh.gfp.dirf

        controllers = [
            # Aqui devem ser listados os caminhos dos controllers do app. Ex: web.api.cms.metadata
        ]

        def ready(self):
            '''
            O carregamento de partes necessárias ao app.
            '''
            connect_plugins()
            connect_signals()
            register_statics()
            # carregar qualquer outra coisa necessária ao app

    def connect_plugins():
        '''Seus plugins devem ser carregados aqui.

           importlib.import_module('nome.canonico.do.modulo.do.plugin')
        '''
        pass

    def connect_signals():
        '''Seus sinais devem ser carregados aqui.

           importlib.import_module('nome.canonico.do.modulo.do.sinal')
        '''
        pass

    def register_statics():
        '''O registro dos arquivos estáticos do app deve ser feito aqui.

        Ex:

            Application = importlib.import_module('default.views').Application

            Application.register_javascript('/%(context)s/static/web/js/shortcuts.js')
            Application.register_stylesheet('/%(context)s/static/web/css/styles.css')
        '''

        Application = importlib.import_module('default.views').Application
        # Application.register_javascript('/%(context)s/caminho/para/o/arquivo.js')
        # Application.register_stylesheet('/%(context)s/caminho/para/o/arquivo.css')


    """

  'Save (Overwrite)':
    prefix: 'py_save_overwrite'
    'body': """
        def save(self, ${1:*args}, ${2:**kwargs}):
            super(${3:SuperClassName}, self).save(${1:*args}, ${2:**kwargs})
        $0
    """


'.text.html.basic':
    'Django Template - for':
        prefix: 'dj_for'
        body: """
        {% for ${1:i} in ${2:obj} %}
            {{ ${1:i}.${3:field} }}
        {% endfor %}
        $0
        """
